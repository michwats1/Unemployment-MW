# -*- coding: utf-8 -*-
"""MW Unemployment Report (Summer 2023) - PROTOTYPE / SOLUTIONS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1snerRwSW5059tgHHMKfyDqXJGfs-oCz6

This notebook contains an example prototype application code for creating an unemployment data dashboard / report, using real-time unemployment rate data from the AlphaVantage API.

We will work on translating this prototype notebook into a local development repository, and following software development best practices such as version control and automated testing.

# Prerequisites

Obtain an [AlphaVantage API Key](https://www.alphavantage.co/support/#api-key). A normal key should be fine, but alternatively you can use one of the prof's "premium" keys.

# Instructions for this Prototype (already completed)


  1. Read the docs for the [AlphaVantage API](https://www.alphavantage.co/documentation/).
  2. Find the endpoint and corresponding URL for requesting **unemployment data**.
  3. Make an example request in the browser, to verify the data is there and start to visually inspect its structure.
  4. Make the request programmatically via Python.
  5. Parse the response data, to answer the questions below.



> NOTE: Remember to run the setup cell before you try to make a request. This will help you keep your secret credential safe!!!!

# Challenges

**Challenge A**

What is the most recent unemployment rate? And the corresponding date? Display the unemployment rate using a percent sign.

> NOTE: assume the most recent data is first (i.e. no need to sort, although it may be helpful / safe to do so)

> HINT: use a format string or string concat to help with the percent sign display


**Challenge B**

What is the average unemployment rate for all months during this calendar year? How many months are included?

> HINT: use a filtering operation to get only the datapoints we care about. You could maybe use substring inclusion in your filter condition.

> HINT: you might need to convert the string values to float datatype

**Challenge C**

Plot a line chart of unemployment rates over time.

> HINT: use the [plotly package](https://github.com/prof-rossetti/intro-to-python/blob/main/notes/python/packages/plotly.md)!

> HINT: you might need to convert the string values to float datatype

# Setup
"""

from getpass import getpass

API_KEY = getpass("Please input your AlphaVantage API Key: ")

"""# Solution (JSON)"""

import requests
import json
from pprint import pprint

request_url = f"https://www.alphavantage.co/query?function=UNEMPLOYMENT&apikey={API_KEY}"

response = requests.get(request_url)

parsed_response = json.loads(response.text)
print(type(parsed_response))
pprint(parsed_response)

data = parsed_response["data"]

# Challenge A
#
# What is the most recent unemployment rate? And the corresponding date?
# Display the unemployment rate using a percent sign.

print("-------------------------")
print("LATEST UNEMPLOYMENT RATE:")
#print(data[0])
print(f"{data[0]['value']}%", "as of", data[0]["date"])

# Challenge B
#
# What is the average unemployment rate for all months during this calendar year?
# ... How many months does this cover?

from statistics import mean

this_year = [d for d in data if "2023-" in d["date"]]

rates_this_year = [float(d["value"]) for d in this_year]
#print(rates_this_year)

print("-------------------------")
print("AVG UNEMPLOYMENT THIS YEAR:", f"{mean(rates_this_year)}%")
print("NO MONTHS:", len(this_year))

# Challenge C
#
# Plot a line chart of unemployment rates over time.

from plotly.express import line

dates = [d["date"] for d in data] #mapping
rates = [float(d["value"]) for d in data]

fig = line(x=dates, y=rates, title="United States Unemployment Rate over time", labels= {"x": "Month", "y": "Unemployment Rate"})
fig.show()

"""# Cleanup Prep"""

#def format_pct(my_number:float) -> str:

def format_pct(my_number):
    """
        Formats a percentage number like 3.6555554 as percent, rounded to two decimal places.

        Param my_number (float) like 3.6555554

        Returns (str) like '3.66%'
    """
    return f"{my_number:.2f}%"

print(format_pct(3.65554))

print(format_pct(25.4))

result = format_pct(25.4)
print(result)

assert format_pct(3.65554) == '3.66%'

assert format_pct(25.4) == '25.40%'

result = format_pct(25.4)
assert result == '25.40%'
#assert result == 'oops%'